% ---------- Terrestrial Multisensor Data Acquisition Lab3 -------------- %
% Karman Filter for circle situation
% Create   : 04.02.2020
% Last edit: 06.02.2020
% Tianqi Xiao; Zhenqiao Wang; Yihui Yang
%
clear all 
clc
%%  load Oberservation and get reference coordinates by time
% Observations: 
load('Circle1_Calibrated.mat')
load('Circle2_Calibrated.mat')
% Load reference data
ref   = textread( 'reference.txt','%s');
ref   = reshape(ref,16,[]);
ref_t = convertCharsToStrings(ref(4,:)');
ref_X = str2num(cell2mat(ref(5,:)'));
ref_Y = str2num(cell2mat(ref(6,:)'));
% get cirle part by time
% First circle: 14:44 (52-100) Second circle: 14:46(101-154)
ref_X1 = ref_X(52:100);
ref_Y1 = ref_Y(52:100);
ref_X2 = ref_X(101:154);
ref_Y2 = ref_Y(101:154);


%% Given quantities
% cofactor matrix of observations Qll from labsheet
sigma_x         = 0.02; % m
sigma_y         = 0.02;
sigma_dphi_Gyr = 5*pi/180;
sigma_dphi_Odo = 3*pi/180;
sigma_ds_Odo    = 0.1; % m
sigma_ds_Optic  = 0.1; % m
dt = 1; % s accroding to GPS
%% first circle
% observation vecor : l=XGPS,YGPS,delta_phi_gyr,delta_phi_odo,delta_s_odo,delta_s_optic
l1 = Circle1_Cali(31:10:491,2:end)';

% cofactor matrix of observations, 6*6 matrix  sigma_dphi_Gyr,
Q1_ll = diag([sigma_x, sigma_y, sigma_dphi_Gyr, sigma_dphi_Odo, sigma_ds_Odo, sigma_ds_Optic].^2); 

% initial state vector: y=x_hat, y_hat phi_hat v_hat delta_phi_hat
y1_hat = zeros(5,size(l1,1));
y1_hat(:,1) = [l1(1,1);l1(2,1);atan2(l1(2,1),l1(1,1));l1(5,2)-l1(5,1);l1(3,1)];
y1_hat(:,2) = [l1(1,2);l1(2,2);atan2(l1(2,2),l1(1,2));l1(5,3)-l1(5,2);l1(3,2)];
y1_bar = y1_hat(:,1);

% standard deviations for all models (from labsheet) sigma x,y sigma phi sigma v sigma dphi
Q1_yy_hat = diag([0.7,  0.7, 5*pi/180, 5*1000/3600, 5*pi/180].^2);

% disturbance quantities are generated by white noise
a1_dist = 1*randn(1,size(l1,2));
phi1_dist = 1*randn(1,size(l1,2));

% disturbance vector w
w1 = [a1_dist;phi1_dist];

% loop
for k= 2:size(l1,2)-1
    Q1_ww = diag([a1_dist(k-1),phi1_dist(k-1)]);
 
    A1 = y1_bar(4)*dt*cos(y1_hat(3,k-1)+y1_bar(5))/y1_bar(5) + y1_bar(4)*dt*(sin(y1_hat(3,k-1))-sin(y1_hat(3,k-1)+y1_bar(5)))/(y1_bar(5)^2);
    B1 = y1_bar(4)*dt*sin(y1_hat(3,k-1)+y1_bar(5))/y1_bar(5) - y1_bar(4)*dt*(cos(y1_hat(3,k-1))-cos(y1_hat(3,k-1)+y1_bar(5)))/(y1_bar(5)^2);

    % Error propagation: T*Qyy_k*T' + S*Qww*S'
    T1 = [ 1, 0, y1_bar(4)*dt*(cos(y1_hat(3,k-1)+y1_bar(5))-cos(y1_hat(3,k-1)))/y1_bar(5), dt*(sin(y1_hat(3,k-1)+y1_bar(5))-sin(y1_hat(3,k-1)))/y1_bar(5), A1;
              0, 1, y1_bar(4)*dt*(sin(y1_hat(3,k-1)+y1_bar(5))-sin(y1_hat(3,k-1)))/y1_bar(5), -dt*(cos(y1_hat(3,k-1)+y1_bar(5))-cos(y1_hat(3,k-1)))/y1_bar(5), B1;
              0, 0, 1, 0, 1;
              0, 0, 0, 1, 0;
              0, 0, 0, 0, 1]; 

    phi_dot = y1_bar(5)/dt;
    C1 = y1_bar(4)*dt/phi_dot*cos(y1_hat(3,k-1)+y1_bar(5)) - y1_bar(4)/phi_dot^2*(-sin(y1_hat(3,k-1))+sin(y1_hat(3,k-1)+y1_bar(5)));
    D1 = y1_bar(4)*dt/phi_dot*sin(y1_hat(3,k-1)+y1_bar(5)) - y1_bar(4)/phi_dot^2*(cos(y1_hat(3,k-1))-cos(y1_hat(3,k-1)+y1_bar(5)));
    % Disturbances 5*2
    S1 = [0.5*(dt^2)/y1_bar(5)*(-sin(y1_hat(3,k-1))+sin(y1_hat(3,k-1)+y1_bar(5))), C1;
             0.5*(dt^2)/y1_bar(5)*(cos(y1_hat(3,k-1))-cos(y1_hat(3,k-1)+y1_bar(5))),  D1;
             0,                                                                       dt;
             dt,                                                                      0;
             0,                                                                       dt];    
    % covariance matrix of predicted state vector
    Q1_yy_bar = T1 * Q1_yy_hat * T1' + S1 * Q1_ww * S1';
    
    % Innovation 8*5
    H1 =    [ 1, 0, 0, 0, 0;    % x_gps
              0, 1, 0, 0, 0;    % y_gps
              0, 0, 0, 0, 1;    % phi_gyro
              0, 0, 0, 0, 1;    % phi_odo
              0, 0, 0, dt, 0;   % s_odo
              0, 0, 0, dt, 0];  % s_optic
    
     % predicted state vector 5*1
     y1_bar = T1 * y1_hat(:,k-1) + S1 * w1(:,k-1); 
     % predicted measurement 8*1
     l1_bar = H1 * y1_bar;
     
     % predicted error 8*n
%      d = [l(1:2 ,k);l(4:end,k)] - l_bar;
      d1 = l1(: ,k) - l1_bar;
      
     % covariance matrix of innovation vector 8*8
     Q1_dd = Q1_ll + H1 * Q1_yy_bar * H1';
     
     % Gain matrix 5*8
     K1 = Q1_yy_bar * H1' * inv(Q1_dd);
     % updated state vector 5*1
     y1_hat(:,k+1) = y1_bar + K1 * d1;
     % covariance matrix of updated state vector
     Q1_yy_hat = Q1_yy_bar - K1 * Q1_dd * K1';
     
     % y_hat and Q_yy_hat as input for next epoch
end


%% second circle
% observation vecor : l=XGPS,YGPS,delta_phi_gyr,delta_phi_odo,delta_s_odo,delta_s_optic
l2 = Circle2_Cali(11:10:end,2:end)';

% cofactor matrix of observations, 6*6 matrix  sigma_dphi_Gyr,
Q2_ll = diag([sigma_x, sigma_y, sigma_dphi_Gyr, sigma_dphi_Odo, sigma_ds_Odo, sigma_ds_Optic].^2); 

% initial state vector: y=x_hat, y_hat phi_hat v_hat delta_phi_hat
y2_hat = zeros(5,size(l2,1));
y2_hat(:,1) = [l2(1,1);l2(2,1);atan2(l2(2,1),l2(1,1));l2(5,2)-l2(5,1);l2(3,1)];
y2_hat(:,2) = [l2(1,2);l2(2,2);atan2(l2(2,2),l2(1,2));l2(5,3)-l2(5,2);l2(3,2)];
y2_bar = y2_hat(:,1);

% standard deviations for all models (from labsheet) sigma x,y sigma phi sigma v sigma dphi
Q2_yy_hat = diag([0.7,  0.7, 5*pi/180, 5*1000/3600, 5*pi/180].^2);

% disturbance quantities are generated by white noise
a2_dist = 1*randn(1,size(l2,2));
phi2_dist = 1*randn(1,size(l2,2));

% disturbance vector w
w1 = [a2_dist;phi2_dist];

% loop
for k= 2:size(l2,2)-1
    Q2_ww = diag([a2_dist(k-1),phi2_dist(k-1)]);
 
    A2 = y2_bar(4)*dt*cos(y2_hat(3,k-1)+y2_bar(5))/y2_bar(5) + y2_bar(4)*dt*(sin(y2_hat(3,k-1))-sin(y2_hat(3,k-1)+y2_bar(5)))/(y2_bar(5)^2);
    B2 = y2_bar(4)*dt*sin(y2_hat(3,k-1)+y2_bar(5))/y2_bar(5) - y2_bar(4)*dt*(cos(y2_hat(3,k-1))-cos(y2_hat(3,k-1)+y2_bar(5)))/(y2_bar(5)^2);

    % Error propagation: T*Qyy_k*T' + S*Qww*S'
    T2 = [ 1, 0, y2_bar(4)*dt*(cos(y2_hat(3,k-1)+y2_bar(5))-cos(y2_hat(3,k-1)))/y2_bar(5), dt*(sin(y2_hat(3,k-1)+y2_bar(5))-sin(y2_hat(3,k-1)))/y2_bar(5), A2;
           0, 1, y2_bar(4)*dt*(sin(y2_hat(3,k-1)+y2_bar(5))-sin(y2_hat(3,k-1)))/y2_bar(5), -dt*(cos(y2_hat(3,k-1)+y2_bar(5))-cos(y2_hat(3,k-1)))/y2_bar(5), B2;
           0, 0, 1, 0, 1;
           0, 0, 0, 1, 0;
           0, 0, 0, 0, 1]; 

    phi2_dot = y2_bar(5)/dt;
    C2 = y2_bar(4)*dt/phi2_dot*cos(y2_hat(3,k-1)+y2_bar(5)) - y2_bar(4)/phi2_dot^2*(-sin(y2_hat(3,k-1))+sin(y2_hat(3,k-1)+y2_bar(5)));
    D2 = y2_bar(4)*dt/phi2_dot*sin(y2_hat(3,k-1)+y2_bar(5)) - y2_bar(4)/phi2_dot^2*(cos(y2_hat(3,k-1))-cos(y2_hat(3,k-1)+y2_bar(5)));
    % Disturbances 5*2
    S2 = [0.5*(dt^2)/y2_bar(5)*(-sin(y2_hat(3,k-1))+sin(y2_hat(3,k-1)+y2_bar(5))), C2;
             0.5*(dt^2)/y2_bar(5)*(cos(y2_hat(3,k-1))-cos(y2_hat(3,k-1)+y2_bar(5))),  D2;
             0,                                                                       dt;
             dt,                                                                      0;
             0,                                                                       dt];    
    % covariance matrix of predicted state vector
    Q2_yy_bar = T2 * Q2_yy_hat * T2' + S2 * Q2_ww * S2';
    
    % Innovation 8*5
    H2 =    [ 1, 0, 0, 0, 0;    % x_gps
              0, 1, 0, 0, 0;    % y_gps
              0, 0, 0, 0, 1;    % phi_gyro
              0, 0, 0, 0, 1;    % phi_odo
              0, 0, 0, dt, 0;   % s_odo
              0, 0, 0, dt, 0];  % s_optic
    
     % predicted state vector 5*1
     y2_bar = T2 * y2_hat(:,k-1) + S2 * w1(:,k-1); 
     % predicted measurement 8*1
     l2_bar = H2 * y2_bar;
     
     % predicted error 8*n
%      d = [l(1:2 ,k);l(4:end,k)] - l_bar;
      d2 = l2(: ,k) - l2_bar;
      
     % covariance matrix of innovation vector 8*8
     Q2_dd = Q2_ll + H2 * Q2_yy_bar * H2';
     
     % Gain matrix 5*8
     K2 = Q2_yy_bar * H2' * inv(Q2_dd);
     % updated state vector 5*1
     y2_hat(:,k+1) = y2_bar + K2 * d2;
     % covariance matrix of updated state vector
     Q2_yy_hat = Q2_yy_bar - K2 * Q2_dd * K2';
     
     % y_hat and Q_yy_hat as input for next epoch
end

%%
figure(1);

plot(y1_hat(1,:),y1_hat(2,:),'o-r','Displayname','Kalman Filter Result');
hold on;
plot(l1(1,:),l1(2,:),'*-c','Displayname','Ublox measurement');
title('Ublox data');
hold on;
plot(ref_X1,ref_Y1,'o-g','Displayname','Leica GPS Reference');

title('Kalman filter Result of Circle Model');
grid on;
legend;

%legend('Kalman filter','Leica data');
xlabel('x [m]');
ylabel('y [m]');
axis equal;
hold off;


figure(2);

plot(y2_hat(1,:),y2_hat(2,:),'o-r','Displayname','Kalman Filter Result');
hold on;
plot(l2(1,:),l2(2,:),'*-c','Displayname','Ublox measurement');
title('Ublox data');
hold on;
plot([ref_X2],[ref_Y2],'o-g','Displayname','Leica GPS Reference');
hold on;
%title('GPS data');
title('Kalman filter Result of Circle Model');
grid on;
legend;

%legend('Kalman filter','Leica data');
xlabel('x [m]');
ylabel('y [m]');
axis equal;
hold off;

